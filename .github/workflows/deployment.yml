name: 'Terraform Deployment'

on:
  push:
    branches:
      - 'dev'
      - 'staging'
      - 'prod'

jobs:
  deploy:
    name: 'Terraform Deploy'
    if: github.ref_name != 'prod'
    runs-on: ubuntu-latest
    environment: ${{ github.ref_name }}

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - uses: actions/checkout@v3

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v2

      - name: 'Terraform Init'
        run: terraform init -backend-config="backend.${{ github.ref_name }}.conf"

      - name: 'Terraform Plan'
        run: terraform plan -var-file="${{ github.ref_name }}.tfvars"

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve -var-file="${{ github.ref_name }}.tfvars"

  deploy_prod:
    name: 'Terraform Deploy to Production'
    if: github.ref_name == 'prod'
    runs-on: ubuntu-latest
    environment: production

    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

    steps:
      - uses: actions/checkout@v3

      - name: 'Set up Terraform'
        uses: hashicorp/setup-terraform@v2

      - name: 'Terraform Init'
        run: terraform init -backend-config="backend.prod.conf"

      - name: 'Terraform Plan'
        run: terraform plan -var-file="prod.tfvars"

      - name: 'Awaiting Manual Approval'
        uses: peter-evans/enable-pull-request-automerge@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          message: 'Awaiting manual approval to deploy to production.'
          pull-request-number: ''

      - name: 'Terraform Apply'
        run: terraform apply -auto-approve -var-file="prod.tfvars"
